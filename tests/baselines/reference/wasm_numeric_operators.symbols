=== tests/cases/compiler/wasm_numeric_operators.ts ===

export function add(a: number, b: number) { return a + b; }
>add : Symbol(add, Decl(wasm_numeric_operators.ts, 0, 0))
>a : Symbol(a, Decl(wasm_numeric_operators.ts, 1, 20))
>b : Symbol(b, Decl(wasm_numeric_operators.ts, 1, 30))
>a : Symbol(a, Decl(wasm_numeric_operators.ts, 1, 20))
>b : Symbol(b, Decl(wasm_numeric_operators.ts, 1, 30))

export function sub(a: number, b: number) { return a - b; }
>sub : Symbol(sub, Decl(wasm_numeric_operators.ts, 1, 59))
>a : Symbol(a, Decl(wasm_numeric_operators.ts, 2, 20))
>b : Symbol(b, Decl(wasm_numeric_operators.ts, 2, 30))
>a : Symbol(a, Decl(wasm_numeric_operators.ts, 2, 20))
>b : Symbol(b, Decl(wasm_numeric_operators.ts, 2, 30))

export function mul(a: number, b: number) { return a * b; }
>mul : Symbol(mul, Decl(wasm_numeric_operators.ts, 2, 59))
>a : Symbol(a, Decl(wasm_numeric_operators.ts, 3, 20))
>b : Symbol(b, Decl(wasm_numeric_operators.ts, 3, 30))
>a : Symbol(a, Decl(wasm_numeric_operators.ts, 3, 20))
>b : Symbol(b, Decl(wasm_numeric_operators.ts, 3, 30))

export function div(a: number, b: number) { return a / b; }
>div : Symbol(div, Decl(wasm_numeric_operators.ts, 3, 59))
>a : Symbol(a, Decl(wasm_numeric_operators.ts, 4, 20))
>b : Symbol(b, Decl(wasm_numeric_operators.ts, 4, 30))
>a : Symbol(a, Decl(wasm_numeric_operators.ts, 4, 20))
>b : Symbol(b, Decl(wasm_numeric_operators.ts, 4, 30))

export function precedence_mul_before_add(a: number, b: number, c: number) { return a * b + c; }
>precedence_mul_before_add : Symbol(precedence_mul_before_add, Decl(wasm_numeric_operators.ts, 4, 59))
>a : Symbol(a, Decl(wasm_numeric_operators.ts, 5, 42))
>b : Symbol(b, Decl(wasm_numeric_operators.ts, 5, 52))
>c : Symbol(c, Decl(wasm_numeric_operators.ts, 5, 63))
>a : Symbol(a, Decl(wasm_numeric_operators.ts, 5, 42))
>b : Symbol(b, Decl(wasm_numeric_operators.ts, 5, 52))
>c : Symbol(c, Decl(wasm_numeric_operators.ts, 5, 63))

export function precedence_add_after_mul(a: number, b: number, c: number) { return a + b * c; }
>precedence_add_after_mul : Symbol(precedence_add_after_mul, Decl(wasm_numeric_operators.ts, 5, 96))
>a : Symbol(a, Decl(wasm_numeric_operators.ts, 6, 41))
>b : Symbol(b, Decl(wasm_numeric_operators.ts, 6, 51))
>c : Symbol(c, Decl(wasm_numeric_operators.ts, 6, 62))
>a : Symbol(a, Decl(wasm_numeric_operators.ts, 6, 41))
>b : Symbol(b, Decl(wasm_numeric_operators.ts, 6, 51))
>c : Symbol(c, Decl(wasm_numeric_operators.ts, 6, 62))

export function precedence_parens(a: number, b: number, c: number) { return (a + b) * c; }
>precedence_parens : Symbol(precedence_parens, Decl(wasm_numeric_operators.ts, 6, 95))
>a : Symbol(a, Decl(wasm_numeric_operators.ts, 7, 34))
>b : Symbol(b, Decl(wasm_numeric_operators.ts, 7, 44))
>c : Symbol(c, Decl(wasm_numeric_operators.ts, 7, 55))
>a : Symbol(a, Decl(wasm_numeric_operators.ts, 7, 34))
>b : Symbol(b, Decl(wasm_numeric_operators.ts, 7, 44))
>c : Symbol(c, Decl(wasm_numeric_operators.ts, 7, 55))

